'''. მოცემული 3 მთელი a,b,c != 0 რიცხვებისთვის მოძებნეთ a და
b რიცხვებს შორის მოხვედრილი c რიცხვის ჯერადი რიცხვების
რაოდენობა ყველა შესაძლო ვარიანტისთვის. თუ რომელიმე
a, b-დან ჯერადია c-ს, მაშინ ჩათვალეთ შესაბამისი საზღვარი.
მოიფიქრეთ ამოცანის ამოხსნის ალგორითმი, დაწერეთ და გაუშვით
პროგრამა ციკლის და რეკურსიის (აგრეთვე range) კონსტრუქციის გამოყენების გარეშე.'''

# Task 01
def check_number(a, b, c):
    if a > b:
        return (a  // c) - (b // c) 
    elif b > a:
        return (b // c) - (a  // c) 
    else:
        return a // c      
print(check_number(5, 11, 2))

# ახსნა:
# ვქმნით ფუნქციას რომელსაც ვარქმევთ check_number რომელსაც 
# გადავცემთ სამ არგუმენტს. ა და ბ არის რიცხვები და ც არის თავად რიცხვი რომელსაც ვამოწმებთ ა და ბ რიცხვებს შორის რამდენჯერ მოთავსდება
# მისი ჯერადი რიცხვი. 
# შემდეგ უკვე ვქმნით ორ პირობას. 
# პირველში if a > b: წერია. ამის საშუალებით ჩვენ ვცდილობთ გავიგოთ 
# ბოლო რიცხვი რომელი იქნება. ანუ საიდან სადამდე გავავლოთ დიაპაზონი.
# თუ ეს არ შესრულდება მაშინ elif b > a:პირობას შეამოწმებს.
# return ((a - (a % c)) // c) - ((b + (b % c)) // c)
# აქ შევადგინეთ ფორმულა. თავიდან ვიგებთ ა-ში რამდენჯერ მოთავსდება ც.
# აქვე ვითვალისწინებთ იმას რომ შეიძლება ნაშთიანი გაყოფა იყოს. 
# (თუ უნაშთოდ გაიყოფა 0 გამოაკლდება)
# და ჩვენ ამით ვიგებთ 1-დან ა-მდე რამდენი ც ჯერადი რიცხვი თავსდება. 
# იგივე ხდება ბ-ზეც. 


# For check
count = 0
for i in range(5, 11, 2):
    count += 1
print(count)
        